#include <bitset>   // for using the bitset class
#include <iostream> // for input and output stream operations
#include <vector>   // for using the vector container
#include <string>   // for using the string class
#include <cmath> // for using the pow function
#include <algorithm> // for sorting purposes
#include <random> // for generating random numbers
#include <fstream>  // for file input/output
using namespace std;


vector<int> tempchain{ 1,2,3,4,5,6,7 }; // declare a vector to store the start chain
vector<int> randomVals{}; // declare a vector to store randomly generated values

int n;

// create a random number generator using the Mersenne Twister algorithm
random_device rd;
mt19937 gen(rd());
uniform_int_distribution<> dis(1, 2000);  // define a uniform distribution over the range 1 to 2000


// define a function to generate a random number using the above generator
int randomGenerator(int MAX) {
    // uniformly distributed in range (1, 20);
    int randomX = dis(gen);
    return randomX;
}
// Function to split the binary representation into 3-bit windows (i.e. 101010 into 101 010)
vector<string> getWindows(bitset<33>& bin) {
    string binary_str = bin.to_string();  // convert bitset to string
    vector<string> windows;

    // loop through the binary representation and extract X bits at a time
    for (int i = 0; i < binary_str.length(); i += 3) {
        windows.push_back(binary_str.substr(i, 3));
    }

    return windows; // return vector windows
}

int skipchainval() { // define a function to remove non-unique values from the current chain
    sort(tempchain.begin(), tempchain.end()); // sort the vector in ascending order
    tempchain.erase(unique(tempchain.begin(), tempchain.end()), tempchain.end()); // eliminates non-unique numbers

    return 1;
}

int getDecimal(vector<string>& windows) { 
    int total = 0; // an integer variable initialized to 0, which will be used to accumulate the decimal value of the binary number represented by the 3-bit windows.
    int multiplier = 2; // an integer variable that is used to raise 2 to the power of the X-bit window position when calculating the decimal value.
    int windowmultiplier = 0; // an integer variable that holds the intermediate result of the calculation to convert the current 3-bit window to its decimal value
    int windowval = 0; //  an integer variable that stores the integer value of the current X-bit window.
    int temp1 = 0; // an integer variable that holds the intermediate result of the calculation to convert the current 3-bit window to its decimal value. It is used to check if the next X-bit window can be added to the total without exceeding the target value n

    // loop through the windows from left to right
    for (int i = 0; i < windows.size(); i++) {
        windowval += stoi(windows[i], nullptr, 2); // finding integer value of specific window 
        if (windowval != 0) { // filters out zeros of windowval 
            if (windowval > n) {
                break; //failsafe, incase if we add the next window value and it is too big then it is left alone
            }
            tempchain.insert(tempchain.end(), windowval);
            for (int h = 0; h < 3; h++) { // repeat the for loop three times
                windowmultiplier = windowval * pow(multiplier, h + 1);
                temp1 = windowmultiplier;
                if (temp1 >= n) {
                    break;
                }
                tempchain.insert(tempchain.end(), temp1); // adds to the chain
            }
        }
        windowval = temp1;

    }
    skipchainval();
    return total;
}

int txtwindow() { 
    ofstream outputFile; // declare output file stream
    outputFile.open("chain.txt", ios::out); // open file for writing

    for (int i = 0; i < 2000; i++) { // iterate 2000 times
        n = randomGenerator(1999); // generate a random number between 0 and 1999
        bitset<18> bin(n); // convert the integer to binary representation

        outputFile << "Number: " << n << " Length of Chain: " << tempchain.size() << " : ";  // write output to file
        for (int j = 0; j < tempchain.size(); j++) {  // write output to file
            outputFile << tempchain[j] << " ";  // write output to file
        }
        outputFile << endl; // write newline character to file

        tempchain.clear(); // completely clear temp chain variable
    }
    return 0; // return 0 to indicate it works
}




int main() {

    for (int i = 0; i < 200; i++) { // loop 200 times
        n = randomGenerator(1999); // generate a random integer between 0 and 1999
        bitset<33> bin(n); // convert the integer to binary representation
        vector<string> windows = getWindows(bin); // get the windows from the binary representation
        randomVals.push_back(randomGenerator(2000));


        int result = getDecimal(windows);  // convert the binary windows to their decimal equivalent

        for (int i : tempchain) { // iterate through the elements in the tempchain vector
            cout << i << " "; // print the current element followed by a space
        }
        tempchain.clear(); // completely clear temp chain variable

    }


    return 0;
}
